// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messageservice.proto

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	messageservice.proto

It has these top-level messages:
	AppendEntriesRequest
	AppendEntriesAck
	RequestVoteRequest
	RequestVoteAck
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the entry.
type AppendEntriesRequest struct {
	Entry string `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AppendEntriesRequest) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

// The response message containing the ack
type AppendEntriesAck struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntriesAck) Reset()                    { *m = AppendEntriesAck{} }
func (m *AppendEntriesAck) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesAck) ProtoMessage()               {}
func (*AppendEntriesAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppendEntriesAck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// The request message containing the vote.
type RequestVoteRequest struct {
	Vote string `protobuf:"bytes,1,opt,name=vote" json:"vote,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RequestVoteRequest) GetVote() string {
	if m != nil {
		return m.Vote
	}
	return ""
}

// The response message containing the ack
type RequestVoteAck struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Msg     string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *RequestVoteAck) Reset()                    { *m = RequestVoteAck{} }
func (m *RequestVoteAck) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteAck) ProtoMessage()               {}
func (*RequestVoteAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestVoteAck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RequestVoteAck) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*AppendEntriesRequest)(nil), "model.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesAck)(nil), "model.AppendEntriesAck")
	proto.RegisterType((*RequestVoteRequest)(nil), "model.RequestVoteRequest")
	proto.RegisterType((*RequestVoteAck)(nil), "model.RequestVoteAck")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessageService service

type MessageServiceClient interface {
	// Append a entry
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesAck, error)
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteAck, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesAck, error) {
	out := new(AppendEntriesAck)
	err := grpc.Invoke(ctx, "/model.MessageService/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteAck, error) {
	out := new(RequestVoteAck)
	err := grpc.Invoke(ctx, "/model.MessageService/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageService service

type MessageServiceServer interface {
	// Append a entry
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesAck, error)
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteAck, error)
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.MessageService/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.MessageService/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _MessageService_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _MessageService_RequestVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messageservice.proto",
}

func init() { proto.RegisterFile("messageservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x4f, 0x4b, 0x86, 0x40,
	0x10, 0xc6, 0xb3, 0x7a, 0xfb, 0x33, 0xd1, 0x8b, 0x0c, 0x46, 0x66, 0x97, 0xd8, 0x93, 0x07, 0xf1,
	0x50, 0xd7, 0x2e, 0x7b, 0x88, 0x4e, 0x5d, 0x0c, 0xba, 0xd7, 0x3a, 0x88, 0x98, 0xae, 0xed, 0xac,
	0x42, 0xdf, 0xa5, 0x0f, 0x1b, 0xad, 0x0a, 0x8a, 0xd2, 0x6d, 0x86, 0x79, 0xf6, 0xc7, 0xf3, 0x5b,
	0x08, 0x6a, 0x62, 0x7e, 0x2f, 0x88, 0xc9, 0xf4, 0xa5, 0xa2, 0xb4, 0x35, 0xda, 0x6a, 0xdc, 0xd5,
	0x3a, 0xa7, 0x4f, 0x91, 0x40, 0x20, 0xdb, 0x96, 0x9a, 0xfc, 0xa9, 0xb1, 0xa6, 0x24, 0xce, 0xe8,
	0xab, 0x23, 0xb6, 0x18, 0xc0, 0x8e, 0x1a, 0x6b, 0xbe, 0x43, 0xef, 0xce, 0x8b, 0xcf, 0xb3, 0x61,
	0x11, 0x09, 0xf8, 0x8b, 0xb4, 0x54, 0x15, 0x86, 0x70, 0xca, 0x9d, 0x52, 0xc4, 0xec, 0xb2, 0x67,
	0xd9, 0xb4, 0x8a, 0x18, 0x70, 0xc4, 0xbd, 0x69, 0x4b, 0x13, 0x19, 0xe1, 0xb8, 0xd7, 0x96, 0x46,
	0xb0, 0x9b, 0xc5, 0x23, 0xec, 0x67, 0xc9, 0x7f, 0xa9, 0xe8, 0xc3, 0x51, 0xcd, 0x45, 0x78, 0xe8,
	0x9e, 0xff, 0x8d, 0xf7, 0x3f, 0x1e, 0xec, 0x5f, 0x06, 0xc7, 0xd7, 0xc1, 0x11, 0x9f, 0xe1, 0x72,
	0x51, 0x14, 0x6f, 0x53, 0xe7, 0x9b, 0x6e, 0xc9, 0x46, 0xd7, 0x5b, 0x47, 0xa9, 0x2a, 0x71, 0x80,
	0x12, 0x2e, 0x66, 0xcd, 0xf0, 0x66, 0x4c, 0xae, 0xbd, 0xa2, 0xab, 0xf5, 0xc9, 0x21, 0x3e, 0x4e,
	0xdc, 0x87, 0x3f, 0xfc, 0x06, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xd0, 0xa0, 0xa0, 0x88, 0x01, 0x00,
	0x00,
}
