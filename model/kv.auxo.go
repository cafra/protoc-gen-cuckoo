// Code generated by protoc-gen-auxo 0.1, DO NOT EDIT.
// source: kv.proto

package model

import (
	"context"

	"github.com/cuigh/auxo/net/rpc"
)

var (
	kv = &kvClient{rpc.LazyClient{Name: ""}}
)

type KV interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
}

func GetKV() KV {
	return kv
}

type kvClient struct {
	rpc.LazyClient
}

func (s *kvClient) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	c, err := s.Try()
	if err != nil {
		return nil, err
	}

	resp := new(GetResponse)
	err = c.Call(ctx, "KV", "Get", []interface{}{req}, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *kvClient) Set(ctx context.Context, req *SetRequest) (*SetResponse, error) {
	c, err := s.Try()
	if err != nil {
		return nil, err
	}

	resp := new(SetResponse)
	err = c.Call(ctx, "KV", "Set", []interface{}{req}, resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
